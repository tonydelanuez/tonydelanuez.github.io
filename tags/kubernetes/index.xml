<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kubernetes on tony de la nuez&#39; personal blog</title>
    <link>https://tdoot.com/tags/kubernetes/</link>
    <description>Recent content in kubernetes on tony de la nuez&#39; personal blog</description>
    <image>
      <url>https://tdoot.com/images/pictures/portrait.jpg</url>
      <link>https://tdoot.com/images/pictures/portrait.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Dec 2024 17:50:05 -0600</lastBuildDate><atom:link href="https://tdoot.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building Solid Kubernetes Controllers</title>
      <link>https://tdoot.com/blog/building-solid-kubernetes-controllers/</link>
      <pubDate>Fri, 13 Dec 2024 17:50:05 -0600</pubDate>
      
      <guid>https://tdoot.com/blog/building-solid-kubernetes-controllers/</guid>
      <description>In the last post, I explained the utility and purpose of Kubernetes Controllers. This post will explain how to build them, and how to think about designing them. We&amp;rsquo;ll go into Controller patterns, anti-patterns, and sharp edges of the model that you&amp;rsquo;re bound to run into.
controller-runtime - use it. Or don&amp;rsquo;t, I don&amp;rsquo;t care. It&amp;rsquo;ll probably help though.
You can absolutely build a controller from scratch using client-go (and sometimes that makes sense), but most of the time you should just get started with controller-runtime.</description>
    </item>
    
    <item>
      <title>kubernetes controllers explained - how your cluster stays in line</title>
      <link>https://tdoot.com/blog/kubernetes-controllers-explained/</link>
      <pubDate>Fri, 13 Dec 2024 15:39:45 -0600</pubDate>
      
      <guid>https://tdoot.com/blog/kubernetes-controllers-explained/</guid>
      <description>Controllers aren&amp;rsquo;t just add-ons to Kubernetes - they&amp;rsquo;re fundamental to how the whole system works. They&amp;rsquo;re the caretakers of your cluster, overseeing and orchestrating processes to ensure your defined resources stay on track. Whether it&amp;rsquo;s maintaining pod replicas, managing rolling updates, or handling node lifecycles, controllers are there making sure things run smoothly.
The Kubernetes documentation explains their job as follows:
In Kubernetes, controllers are control loops that watch the state of yourÂ cluster, then make or request changes where needed.</description>
    </item>
    
    <item>
      <title>doing k8s on the cheap - my &#34;new&#34; homelab</title>
      <link>https://tdoot.com/blog/cheap-k8s/</link>
      <pubDate>Sun, 31 Dec 2023 18:11:22 -0500</pubDate>
      
      <guid>https://tdoot.com/blog/cheap-k8s/</guid>
      <description>Most SRE-aligned engineers will tell you they have a home lab. Depending on how grey the beard is, it may be an old blade they acquired when a company moved data centers, an intricate setup of Raspberry Pi 4s set up in a custom cooling rack, or like me and many others, it may just be an old gaming computer they no longer use but cannot bring themselves to get rid of.</description>
    </item>
    
  </channel>
</rss>
